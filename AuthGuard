import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router, UrlTree } from '@angular/router';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { AuthService } from './auth.service';
import { map, take } from 'rxjs/operators';

@Injectable({

    providedIn:'root'
})
export class AuthGuard implements CanActivate{

    constructor(private authService:AuthService,private router:Router){};

    canActivate(route:ActivatedRouteSnapshot,state:RouterStateSnapshot)

    : boolean| Promise<boolean>| Observable<boolean| UrlTree>
    {
       return this.authService.authenicatedUser.pipe(
           (take(1),
           map(user =>{
               if(user==null)
               {
                   return this.router.createUrlTree(['/auth']);
               }
               return true;
           })))};
} 





{path:'feed' , component: PostListComponent,canActivate:[AuthGuard]},

import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router, UrlTree } from '@angular/router';
import { AuthService } from './auth.service';
import { Observable } from 'rxjs';
import { Injectable } from '@angular/core';

@Injectable({
    providedIn:'root'
})
export class AuthGuard implements CanActivate{
    
    constructor(private authService:AuthService,private router:Router){}

    canActivate(route:ActivatedRouteSnapshot,state:RouterStateSnapshot)
    : boolean| Promise<boolean>| Observable<boolean| UrlTree>
    {
        // if we return true here or any observable which eventually returns true then
        // router will know this route is accessible. otherwise not accessible.
        const isAuth=this.authService.getAuthenticationStatus();
        if(isAuth)
        return true;
        else
        this.router.navigate(['/login']);
    }
}
