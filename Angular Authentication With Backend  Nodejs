1. UserSchema in NodeJs

const mongoose=require('mongoose');
const uniqueValidator=require('mongoose-unique-validator');

const userSchema=mongoose.Schema({
    email:{type:String,require:true,unique:true},
    password:{type:String,require:true}

});

userSchema.plugin(uniqueValidator);
// model is mandatory 
//mongoose automatically generates id...
module.exports=mongoose.model('User',userSchema);

********************************************************************************************************************************
2. Creating Request at backend for creating new User and encrypting password for storing in database

router.post("/signup",(req,res,next) => {

    // value  we want to encrypt, salt => higher the salt, higher the encryption and higher safety
    
    bcrypt.hash(req.body.password,10)
    .then( 
        (hash) => {

            const user=new User({
                email: req.body.email,
                password: hash
            });

            user.save()
            .then( (result) =>
            {
                res.status(200).json({
                    message:'User Ceated',
                    result : result
                });
            }).catch(err => {
                res.status(500).json({
                    error:err
                })
            });
    });
   
});

********************************************************************************************************************

3. Connecting Angular To NodeJs to send request!

 createUser(email:string,password:string)
  {
    const authData:AuthData={email:email,password:password};
    this.http.post('http://localhost:3000/api/user/signup',authData).subscribe(
      (response)=>{
        console.log(response);
      }
    )
  }
}

We will improve the logic for handling the case when email is already registered, for now we are just logging that user is created or 

email is already registered.

***********************************************************************************************************************

4. SPA(Single Page Authentication) Authentication IN Backend

https://medium.com/dev-bits/a-guide-for-adding-jwt-token-based-authentication-to-your-single-page-nodejs-applications-c403f7cf04f4

We don't use sessions here because restAPI's are stateless and client and server are decoupled from each other...We will use Web Token.



router.post("/login", (req, res, next) => {
    let fetchedUser;
    User.findOne({ email: req.body.email })
      .then(user => {
       
        if (!user) {
          return res.status(401).json({
            message: "Auth failed"
         
          });
        }

        fetchedUser = user;
        return bcrypt.compare(req.body.password, user.password);
      })
      .then(result => {
       
        if (!result) {
          return res.status(401).json({
            message: "Auth failed"
          });

        }
        
        const token = jwt.sign(
          { email: fetchedUser.email, userId: fetchedUser._id },
          "secret_this_should_be_longer",
          { expiresIn: "1h" }
        );
        res.status(200).json({
          token: token
        });
      })
      .catch(err => {
        return res.status(401).json({
          message: "Auth failed"
        });
      });
  });

***********************************************************************************************************************************

5. SPA Frontend


 login(email:string,password:string)
  {
    const authData:AuthData={email:email,password:password};
    this.http.post('http://localhost:3000/api/user/login',authData).subscribe(
      (response)=>{
        console.log(response);
      }
    )
  }
}

It will just log the response soon we will store this information(token) for authenticated users in browser.

